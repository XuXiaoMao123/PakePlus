{"version":3,"file":"js/139.f90db00a.js","mappings":"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","sources":["webpack://tool-vue2/./src/views/MarkdownEditor.vue?e10f","webpack://tool-vue2/./node_modules/marked/lib/marked.esm.js","webpack://tool-vue2/src/views/MarkdownEditor.vue","webpack://tool-vue2/./src/views/MarkdownEditor.vue?3324","webpack://tool-vue2/./src/views/MarkdownEditor.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"w-[92vw] max-w-none mx-auto py-4 px-0\"},[_vm._m(0),_c('div',{staticClass:\"bg-white dark:bg-neutral-800 border-2 border-primary/20 dark:border-primary/30 rounded-2xl shadow-2xl px-0 md:px-2 xl:px-4 py-2 md:py-4 xl:py-6\"},[_c('div',{staticClass:\"flex flex-col md:flex-row gap-16 xl:gap-28\"},[_c('div',{staticClass:\"flex-1 flex flex-col min-w-0\"},[_c('div',{staticClass:\"flex flex-wrap items-center gap-2 mb-2\"},[_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"disabled\":!_vm.canUndo,\"title\":\"撤销\"},on:{\"click\":_vm.undo}},[_c('i',{staticClass:\"fa fa-undo\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"disabled\":!_vm.canRedo,\"title\":\"重做\"},on:{\"click\":_vm.redo}},[_c('i',{staticClass:\"fa fa-repeat\"})]),_c('span',{staticClass:\"mx-1 text-neutral-300 dark:text-neutral-600\"},[_vm._v(\"|\")]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"加粗\"},on:{\"click\":function($event){return _vm.insertMd('bold')}}},[_c('i',{staticClass:\"fa fa-bold\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"斜体\"},on:{\"click\":function($event){return _vm.insertMd('italic')}}},[_c('i',{staticClass:\"fa fa-italic\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"标题\"},on:{\"click\":function($event){return _vm.insertMd('heading')}}},[_c('i',{staticClass:\"fa fa-header\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"引用\"},on:{\"click\":function($event){return _vm.insertMd('quote')}}},[_c('i',{staticClass:\"fa fa-quote-left\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"行内代码\"},on:{\"click\":function($event){return _vm.insertMd('code')}}},[_c('i',{staticClass:\"fa fa-code\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"代码块\"},on:{\"click\":function($event){return _vm.insertMd('codeblock')}}},[_c('i',{staticClass:\"fa fa-file-code\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"链接\"},on:{\"click\":function($event){return _vm.insertMd('link')}}},[_c('i',{staticClass:\"fa fa-link\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"图片\"},on:{\"click\":function($event){return _vm.insertMd('image')}}},[_c('i',{staticClass:\"fa fa-image\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"无序列表\"},on:{\"click\":function($event){return _vm.insertMd('ul')}}},[_c('i',{staticClass:\"fa fa-list-ul\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"有序列表\"},on:{\"click\":function($event){return _vm.insertMd('ol')}}},[_c('i',{staticClass:\"fa fa-list-ol\"})]),_c('button',{staticClass:\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\",attrs:{\"title\":\"分隔线\"},on:{\"click\":function($event){return _vm.insertMd('hr')}}},[_c('i',{staticClass:\"fa fa-minus\"})]),_c('div',{staticClass:\"flex-1\"}),_c('button',{staticClass:\"px-3 py-1 rounded bg-green-500 text-white text-xs font-semibold hover:bg-green-600 transition disabled:bg-neutral-200 disabled:text-neutral-400 disabled:cursor-not-allowed\",attrs:{\"disabled\":!_vm.markdown,\"title\":\"复制全部 Markdown\"},on:{\"click\":_vm.copyAll}},[_c('i',{staticClass:\"fa fa-copy mr-1\"}),_vm._v(\"复制全部 \")]),(_vm.copied)?_c('span',{staticClass:\"ml-2 text-green-500 text-xs\"},[_vm._v(\"已复制！\")]):_vm._e()]),_c('label',{staticClass:\"mb-2 text-base text-neutral-700 dark:text-neutral-200 font-semibold\"},[_vm._v(\"Markdown 编辑\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.markdown),expression:\"markdown\"}],ref:\"textarea\",staticClass:\"flex-1 min-h-[500px] w-full p-2 md:p-3 rounded border border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 text-sm md:text-base leading-tight text-neutral-800 dark:text-neutral-100 font-mono resize-none focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition\",attrs:{\"placeholder\":\"在这里输入 Markdown 内容...\"},domProps:{\"value\":(_vm.markdown)},on:{\"keydown\":[function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"tab\",9,$event.key,\"Tab\"))return null;$event.preventDefault();return _vm.handleTab.apply(null, arguments)},function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"tab\",9,$event.key,\"Tab\"))return null;if(!$event.shiftKey)return null;$event.preventDefault();return _vm.handleShiftTab.apply(null, arguments)}],\"input\":[function($event){if($event.target.composing)return;_vm.markdown=$event.target.value},_vm.pushHistory]}}),_vm._m(1)]),_c('div',{staticClass:\"flex-1 flex flex-col min-w-0\"},[_c('label',{staticClass:\"mb-2 text-lg text-neutral-700 dark:text-neutral-200 font-semibold\"},[_vm._v(\"实时预览\")]),_c('div',{staticClass:\"flex-1 min-h-[500px] w-full p-4 rounded border border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 text-base md:text-lg prose prose-neutral dark:prose-invert max-w-none overflow-auto\",domProps:{\"innerHTML\":_vm._s(_vm.renderedMarkdown)}})])])]),(_vm.showImageDialog)?_c('div',{staticClass:\"fixed inset-0 z-50 flex items-center justify-center bg-black/30\"},[_c('div',{staticClass:\"bg-white dark:bg-neutral-800 rounded-xl p-6 shadow-xl w-[320px]\"},[_c('div',{staticClass:\"mb-3 text-base font-semibold text-neutral-700 dark:text-neutral-200\"},[_vm._v(\"插入图片\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.imageUrl),expression:\"imageUrl\"}],staticClass:\"w-full p-2 rounded border border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 text-sm mb-4\",attrs:{\"placeholder\":\"图片链接\"},domProps:{\"value\":(_vm.imageUrl)},on:{\"input\":function($event){if($event.target.composing)return;_vm.imageUrl=$event.target.value}}}),_c('div',{staticClass:\"flex justify-end gap-2\"},[_c('button',{staticClass:\"px-3 py-1 rounded bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-200 text-xs\",on:{\"click\":function($event){_vm.showImageDialog=false}}},[_vm._v(\"取消\")]),_c('button',{staticClass:\"px-3 py-1 rounded bg-primary text-white text-xs\",on:{\"click\":_vm.confirmImage}},[_vm._v(\"插入\")])])])]):_vm._e()])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"flex items-center mb-4\"},[_c('i',{staticClass:\"fa fa-markdown text-2xl md:text-3xl text-primary dark:text-yellow-400 mr-3\"}),_c('div',[_c('h1',{staticClass:\"text-xl md:text-2xl font-bold text-primary dark:text-yellow-400 mb-1\"},[_vm._v(\"Markdown 编辑器/预览器\")]),_c('p',{staticClass:\"text-neutral-500 dark:text-neutral-300 text-sm md:text-base\"},[_vm._v(\"支持实时编辑和预览，支持暗色模式。\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"mt-2 text-xs text-neutral-400 dark:text-neutral-500\"},[_c('span',[_vm._v(\"快捷键：Tab/Shift+Tab 缩进，Ctrl+Z 撤销，Ctrl+Y 重做。常用语法：**加粗**、*斜体*、`代码`、[链接](url)、- 列表、> 引用、--- 分隔线。\")])])\n}]\n\nexport { render, staticRenderFns }","/**\n * marked v9.1.6 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    // TODO: Fix this rules type\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            list.items[list.items.length - 1].text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c, tokens: [] };\n                }),\n                align: cap[2].replace(/^\\||\\| *$/g, '').split('|'),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    const align = item.align[i];\n                    if (align) {\n                        if (/^ *-+: *$/.test(align)) {\n                            item.align[i] = 'right';\n                        }\n                        else if (/^ *:-+: *$/.test(align)) {\n                            item.align[i] = 'center';\n                        }\n                        else if (/^ *:-+ *$/.test(align)) {\n                            item.align[i] = 'left';\n                        }\n                        else {\n                            item.align[i] = null;\n                        }\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c, tokens: [] };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","<template>\r\n  <div class=\"w-[92vw] max-w-none mx-auto py-4 px-0\">\r\n    <div class=\"flex items-center mb-4\">\r\n      <i class=\"fa fa-markdown text-2xl md:text-3xl text-primary dark:text-yellow-400 mr-3\"></i>\r\n      <div>\r\n        <h1 class=\"text-xl md:text-2xl font-bold text-primary dark:text-yellow-400 mb-1\">Markdown 编辑器/预览器</h1>\r\n        <p class=\"text-neutral-500 dark:text-neutral-300 text-sm md:text-base\">支持实时编辑和预览，支持暗色模式。</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"bg-white dark:bg-neutral-800 border-2 border-primary/20 dark:border-primary/30 rounded-2xl shadow-2xl px-0 md:px-2 xl:px-4 py-2 md:py-4 xl:py-6\">\r\n      <div class=\"flex flex-col md:flex-row gap-16 xl:gap-28\">\r\n        <!-- 编辑区 -->\r\n        <div class=\"flex-1 flex flex-col min-w-0\">\r\n          <!-- 样式按钮和复制 -->\r\n          <div class=\"flex flex-wrap items-center gap-2 mb-2\">\r\n            <button @click=\"undo\" :disabled=\"!canUndo\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"撤销\"><i class=\"fa fa-undo\"></i></button>\r\n            <button @click=\"redo\" :disabled=\"!canRedo\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"重做\"><i class=\"fa fa-repeat\"></i></button>\r\n            <span class=\"mx-1 text-neutral-300 dark:text-neutral-600\">|</span>\r\n            <button @click=\"insertMd('bold')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"加粗\"><i class=\"fa fa-bold\"></i></button>\r\n            <button @click=\"insertMd('italic')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"斜体\"><i class=\"fa fa-italic\"></i></button>\r\n            <button @click=\"insertMd('heading')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"标题\"><i class=\"fa fa-header\"></i></button>\r\n            <button @click=\"insertMd('quote')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"引用\"><i class=\"fa fa-quote-left\"></i></button>\r\n            <button @click=\"insertMd('code')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"行内代码\"><i class=\"fa fa-code\"></i></button>\r\n            <button @click=\"insertMd('codeblock')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"代码块\"><i class=\"fa fa-file-code\"></i></button>\r\n            <button @click=\"insertMd('link')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"链接\"><i class=\"fa fa-link\"></i></button>\r\n            <button @click=\"insertMd('image')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"图片\"><i class=\"fa fa-image\"></i></button>\r\n            <button @click=\"insertMd('ul')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"无序列表\"><i class=\"fa fa-list-ul\"></i></button>\r\n            <button @click=\"insertMd('ol')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"有序列表\"><i class=\"fa fa-list-ol\"></i></button>\r\n            <button @click=\"insertMd('hr')\" class=\"px-2 py-1 rounded bg-neutral-200 dark:bg-neutral-700 hover:bg-primary/80 hover:text-white text-xs font-semibold transition\" title=\"分隔线\"><i class=\"fa fa-minus\"></i></button>\r\n            <div class=\"flex-1\"></div>\r\n            <button\r\n              @click=\"copyAll\"\r\n              :disabled=\"!markdown\"\r\n              class=\"px-3 py-1 rounded bg-green-500 text-white text-xs font-semibold hover:bg-green-600 transition disabled:bg-neutral-200 disabled:text-neutral-400 disabled:cursor-not-allowed\"\r\n              title=\"复制全部 Markdown\"\r\n            >\r\n              <i class=\"fa fa-copy mr-1\"></i>复制全部\r\n            </button>\r\n            <span v-if=\"copied\" class=\"ml-2 text-green-500 text-xs\">已复制！</span>\r\n          </div>\r\n          <label class=\"mb-2 text-base text-neutral-700 dark:text-neutral-200 font-semibold\">Markdown 编辑</label>\r\n          <textarea\r\n            ref=\"textarea\"\r\n            v-model=\"markdown\"\r\n            @keydown.tab.prevent=\"handleTab\"\r\n            @keydown.shift.tab.prevent=\"handleShiftTab\"\r\n            @input=\"pushHistory\"\r\n            class=\"flex-1 min-h-[500px] w-full p-2 md:p-3 rounded border border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 text-sm md:text-base leading-tight text-neutral-800 dark:text-neutral-100 font-mono resize-none focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition\"\r\n            placeholder=\"在这里输入 Markdown 内容...\"\r\n          ></textarea>\r\n          <div class=\"mt-2 text-xs text-neutral-400 dark:text-neutral-500\">\r\n            <span>快捷键：Tab/Shift+Tab 缩进，Ctrl+Z 撤销，Ctrl+Y 重做。常用语法：**加粗**、*斜体*、`代码`、[链接](url)、- 列表、> 引用、--- 分隔线。</span>\r\n          </div>\r\n        </div>\r\n        <!-- 预览区 -->\r\n        <div class=\"flex-1 flex flex-col min-w-0\">\r\n          <label class=\"mb-2 text-lg text-neutral-700 dark:text-neutral-200 font-semibold\">实时预览</label>\r\n          <div\r\n            class=\"flex-1 min-h-[500px] w-full p-4 rounded border border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 text-base md:text-lg prose prose-neutral dark:prose-invert max-w-none overflow-auto\"\r\n            v-html=\"renderedMarkdown\"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 图片插入弹窗 -->\r\n    <div v-if=\"showImageDialog\" class=\"fixed inset-0 z-50 flex items-center justify-center bg-black/30\">\r\n      <div class=\"bg-white dark:bg-neutral-800 rounded-xl p-6 shadow-xl w-[320px]\">\r\n        <div class=\"mb-3 text-base font-semibold text-neutral-700 dark:text-neutral-200\">插入图片</div>\r\n        <input v-model=\"imageUrl\" placeholder=\"图片链接\" class=\"w-full p-2 rounded border border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 text-sm mb-4\" />\r\n        <div class=\"flex justify-end gap-2\">\r\n          <button @click=\"showImageDialog=false\" class=\"px-3 py-1 rounded bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-200 text-xs\">取消</button>\r\n          <button @click=\"confirmImage\" class=\"px-3 py-1 rounded bg-primary text-white text-xs\">插入</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { marked } from 'marked'\r\n\r\nexport default {\r\n  name: 'MarkdownEditor',\r\n  data() {\r\n    return {\r\n      markdown: '# Hello Markdown\\n\\n支持 **实时预览**、`代码高亮`、[链接](https://github.com/markedjs/marked) 等。\\n\\n- 支持列表\\n- 支持表格\\n\\n```js\\nconsole.log(\"Hello Markdown!\")\\n```',\r\n      history: [],\r\n      historyIndex: -1,\r\n      showImageDialog: false,\r\n      imageUrl: '',\r\n      copied: false\r\n    }\r\n  },\r\n  computed: {\r\n    renderedMarkdown() {\r\n      return marked(this.markdown, { breaks: true, gfm: true })\r\n    },\r\n    canUndo() {\r\n      return this.historyIndex > 0\r\n    },\r\n    canRedo() {\r\n      return this.historyIndex < this.history.length - 1\r\n    }\r\n  },\r\n  methods: {\r\n    insertMd(type) {\r\n      const textarea = this.$refs.textarea;\r\n      const value = this.markdown;\r\n      const [start, end] = [textarea.selectionStart, textarea.selectionEnd];\r\n      let before = value.slice(0, start);\r\n      let selected = value.slice(start, end);\r\n      let after = value.slice(end);\r\n      let insert = '';\r\n      let cursorOffset = 0;\r\n\r\n      switch (type) {\r\n        case 'bold':\r\n          insert = `**${selected || '加粗文字'}**`;\r\n          cursorOffset = selected ? 0 : 4;\r\n          break;\r\n        case 'italic':\r\n          insert = `*${selected || '斜体文字'}*`;\r\n          cursorOffset = selected ? 0 : 3;\r\n          break;\r\n        case 'heading':\r\n          insert = `# ${selected || '标题'}`;\r\n          cursorOffset = selected ? 0 : 2;\r\n          break;\r\n        case 'quote':\r\n          insert = selected\r\n            ? selected\r\n                .split('\\n')\r\n                .map(line => line.startsWith('> ') ? line : `> ${line}`)\r\n                .join('\\n')\r\n            : '> 引用内容';\r\n          cursorOffset = selected ? 0 : 5;\r\n          break;\r\n        case 'code':\r\n          insert = `\\`${selected || '代码'}\\``;\r\n          cursorOffset = selected ? 0 : 1;\r\n          break;\r\n        case 'codeblock':\r\n          insert = `\\n\\`\\`\\`\\n${selected || '代码块'}\\n\\`\\`\\`\\n`;\r\n          cursorOffset = selected ? 0 : 5;\r\n          break;\r\n        case 'link':\r\n          insert = `[${selected || '链接文本'}](url)`;\r\n          cursorOffset = selected ? 0 : 7;\r\n          break;\r\n        case 'image':\r\n          this.showImageDialog = true;\r\n          this.imageUrl = '';\r\n          return;\r\n        case 'ul':\r\n          insert = selected\r\n            ? selected\r\n                .split('\\n')\r\n                .map(line => (line.startsWith('- ') ? line : `- ${line}`))\r\n                .join('\\n')\r\n            : '- 列表项';\r\n          cursorOffset = selected ? 0 : 4;\r\n          break;\r\n        case 'ol':\r\n          insert = selected\r\n            ? selected\r\n                .split('\\n')\r\n                .map((line, idx) => /^\\d+\\.\\s/.test(line) ? line : `${idx + 1}. ${line}`)\r\n                .join('\\n')\r\n            : '1. 列表项';\r\n          cursorOffset = selected ? 0 : 4;\r\n          break;\r\n        case 'hr':\r\n          insert = '\\n---\\n';\r\n          cursorOffset = 0;\r\n          break;\r\n      }\r\n\r\n      this.updateMarkdown(before + insert + after, before.length + (selected ? insert.length : cursorOffset));\r\n    },\r\n    confirmImage() {\r\n      if (!this.imageUrl) return;\r\n      const textarea = this.$refs.textarea;\r\n      const value = this.markdown;\r\n      const [start, end] = [textarea.selectionStart, textarea.selectionEnd];\r\n      let before = value.slice(0, start);\r\n      let after = value.slice(end);\r\n      let insert = `![图片描述](${this.imageUrl})`;\r\n      this.showImageDialog = false;\r\n      this.imageUrl = '';\r\n      this.updateMarkdown(before + insert + after, before.length + insert.length);\r\n    },\r\n    handleTab(e) {\r\n      const textarea = this.$refs.textarea;\r\n      const value = this.markdown;\r\n      const [start, end] = [textarea.selectionStart, textarea.selectionEnd];\r\n      let before = value.slice(0, start);\r\n      let selected = value.slice(start, end);\r\n      let after = value.slice(end);\r\n      if (selected.length === 0) {\r\n        this.updateMarkdown(before + '  ' + after, start + 2);\r\n      } else {\r\n        const lines = selected.split('\\n');\r\n        const newSelected = lines.map(line => '  ' + line).join('\\n');\r\n        this.updateMarkdown(before + newSelected + after, before.length, before.length + newSelected.length);\r\n      }\r\n    },\r\n    handleShiftTab(e) {\r\n      const textarea = this.$refs.textarea;\r\n      const value = this.markdown;\r\n      const [start, end] = [textarea.selectionStart, textarea.selectionEnd];\r\n      let before = value.slice(0, start);\r\n      let selected = value.slice(start, end);\r\n      let after = value.slice(end);\r\n      if (selected.length === 0) return;\r\n      const lines = selected.split('\\n');\r\n      const newSelected = lines.map(line => line.startsWith('  ') ? line.slice(2) : line).join('\\n');\r\n      this.updateMarkdown(before + newSelected + after, before.length, before.length + newSelected.length);\r\n    },\r\n    updateMarkdown(newVal, cursorStart, cursorEnd) {\r\n      this.markdown = newVal;\r\n      this.pushHistory();\r\n      this.$nextTick(() => {\r\n        const textarea = this.$refs.textarea;\r\n        if (typeof cursorEnd === 'number') {\r\n          textarea.setSelectionRange(cursorStart, cursorEnd);\r\n        } else {\r\n          textarea.setSelectionRange(cursorStart, cursorStart);\r\n        }\r\n        textarea.focus();\r\n      });\r\n    },\r\n    pushHistory() {\r\n      // 避免重复记录\r\n      if (this.history.length === 0 || this.markdown !== this.history[this.historyIndex]) {\r\n        this.history = this.history.slice(0, this.historyIndex + 1);\r\n        this.history.push(this.markdown);\r\n        this.historyIndex = this.history.length - 1;\r\n      }\r\n    },\r\n    undo() {\r\n      if (this.canUndo) {\r\n        this.historyIndex--;\r\n        this.markdown = this.history[this.historyIndex];\r\n      }\r\n    },\r\n    redo() {\r\n      if (this.canRedo) {\r\n        this.historyIndex++;\r\n        this.markdown = this.history[this.historyIndex];\r\n      }\r\n    },\r\n    async copyAll() {\r\n      if (!this.markdown) return;\r\n      try {\r\n        await navigator.clipboard.writeText(this.markdown);\r\n        this.copied = true;\r\n        setTimeout(() => (this.copied = false), 1200);\r\n      } catch (e) {\r\n        this.copied = false;\r\n        alert('复制失败，请手动全选复制');\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 初始化历史记录\r\n    this.pushHistory();\r\n  }\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MarkdownEditor.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MarkdownEditor.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./MarkdownEditor.vue?vue&type=template&id=05660fb3\"\nimport script from \"./MarkdownEditor.vue?vue&type=script&lang=js\"\nexport * from \"./MarkdownEditor.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_m","attrs","canUndo","on","undo","canRedo","redo","_v","$event","insertMd","markdown","copyAll","_e","directives","name","rawName","value","expression","ref","domProps","type","indexOf","_k","keyCode","key","preventDefault","handleTab","apply","arguments","shiftKey","handleShiftTab","target","composing","pushHistory","_s","renderedMarkdown","imageUrl","showImageDialog","confirmImage","staticRenderFns","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","html","encode","test","replace","unescapeTest","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","val","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parser","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","cell","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","postprocess","Marked","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","pack","opts","ext","prevRenderer","extLevel","prop","rendererFunc","rendererKey","tokenizerFunc","tokenizerKey","prevTokenizer","hooksFunc","hooksKey","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults","data","history","historyIndex","copied","computed","methods","textarea","$refs","end","selectionStart","selectionEnd","before","selected","after","insert","cursorOffset","startsWith","idx","updateMarkdown","lines","newSelected","newVal","cursorStart","cursorEnd","$nextTick","setSelectionRange","focus","navigator","clipboard","writeText","setTimeout","alert","mounted","component"],"sourceRoot":""}